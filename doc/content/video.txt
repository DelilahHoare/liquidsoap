title: Video in Liquidsoap

h3. Video

h4. Getting started with video

There is nothing special to do in order to stream video. In most cases,
liquidsoap will detect which sources have to manipulate video data. This
detection is typically based on the output (see below).

Although it is possible to have some sources manipulating video and some
others not, all sources manipulating video will share the same image
dimensions and video samplerate (number of frames per seconds). Those
values are associated with the following configuration keys:
%%
set("frame.video.width",320)
set("frame.video.height",240)
set("frame.video.samplerate",25)
%%

Finally, in some cases, you may wish to override the default number of video
channels, used when liquidsoap cannot guess the correct number of channels
for a given source:
%%
set("frame.video.channels",0)
%%

You can use usual operators such as <code>single</code>
or <code>playlist</code> to read video files.
For now, only ogg/theora format is supported (you can use the "ffmpeg2theora":http://v2v.cc/~j/ffmpeg2theora/ program to convert your videos to this format). For instance, a playlist of ogg videos can be streamed using
%%
output.icecast(%ogg(%theora,%vorbis), playlist("my_playlist"))
%%
where <code>my_playlist</code> is a list of video files.

For more details about the encoding settings, you can see the "encoding formats":encoding_formats.html page.

If you have SDL support in Liquidsoap, the video part of the stream can be previewed locally using the <code>output.sdl</code> operator. For example, the script
%%
output.sdl(drop_audio(single("file.ogv")))
%%
will display the video file <code>file.ogv</code>.

We use the @drop_audio@ operator because the @output.sdl@ operator only supports pure video stream. 
Hence, @drop_audio@ returns a source where only the video track is present.

h4. Video effects

A lot of video effects are available in Liquidsoap. The corresponding operators are named <code>video.*</code>. In particular, the <code>video.fade.in</code> and <code>video.fade.out</code> should be used to program transitions, similarly to the <code>fade.in</code> and <code>fade.out</code> operators for audio.
